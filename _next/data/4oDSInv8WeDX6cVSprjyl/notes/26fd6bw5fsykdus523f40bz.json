{"pageProps":{"note":{"id":"26fd6bw5fsykdus523f40bz","title":"Bash","desc":"","updated":1653489385100,"created":1652946820003,"custom":{},"fname":"devlog.bash","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"706187c6335508cf522ef52e0cf4a4ab","links":[{"type":"wiki","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"resources.people.Linus Torvalds","alias":"resources.people.Linus Torvalds","position":{"start":{"line":2,"column":270,"offset":270},"end":{"line":2,"column":305,"offset":305},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"resources.people.Linus Torvalds"}},{"type":"wiki","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.here document","alias":"devlog.here document","position":{"start":{"line":40,"column":49,"offset":1802},"end":{"line":40,"column":73,"offset":1826},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.here document"}},{"type":"wiki","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.path","alias":"$PATH","position":{"start":{"line":110,"column":121,"offset":4184},"end":{"line":110,"column":142,"offset":4205},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.path"}},{"type":"wiki","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.regular expression","alias":"devlog.regular expression","position":{"start":{"line":160,"column":271,"offset":5835},"end":{"line":160,"column":300,"offset":5864},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.regular expression"}},{"type":"wiki","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.connection testing","alias":"devlog.connection testing","position":{"start":{"line":559,"column":3,"offset":12834},"end":{"line":559,"column":32,"offset":12863},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.connection testing"}},{"type":"wiki","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.Dropping a List of IP addresses Using a For Loop","alias":"devlog.Dropping a List of IP addresses Using a For Loop","position":{"start":{"line":560,"column":3,"offset":12866},"end":{"line":560,"column":62,"offset":12925},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.Dropping a List of IP addresses Using a For Loop"}},{"type":"wiki","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.System Administration Script using Menus","alias":"devlog.System Administration Script using Menus","position":{"start":{"line":561,"column":3,"offset":12928},"end":{"line":561,"column":54,"offset":12979},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.System Administration Script using Menus"}},{"type":"ref","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.aliases","position":{"start":{"line":6,"column":1,"offset":356},"end":{"line":6,"column":20,"offset":375},"indent":[]},"xvault":false,"to":{"fname":"devlog.aliases"}},{"type":"ref","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.environment variable","position":{"start":{"line":78,"column":1,"offset":3427},"end":{"line":78,"column":33,"offset":3459},"indent":[]},"xvault":false,"to":{"fname":"devlog.environment variable"}},{"type":"ref","from":{"fname":"devlog.bash","id":"26fd6bw5fsykdus523f40bz","vaultName":"Dendron"},"value":"devlog.shell variables","position":{"start":{"line":80,"column":1,"offset":3461},"end":{"line":80,"column":28,"offset":3488},"indent":[]},"xvault":false,"to":{"fname":"devlog.shell variables"}},{"from":{"fname":"areas.devops","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":12,"column":5,"offset":840},"end":{"line":12,"column":20,"offset":855},"indent":[]},"value":"devlog.bash","alias":"devlog.bash"},{"from":{"fname":"devlog.everything about linux terminal","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":9,"column":40,"offset":534},"end":{"line":9,"column":55,"offset":549},"indent":[]},"value":"devlog.bash","alias":"devlog.bash"},{"from":{"fname":"devlog.jobs","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":6,"column":276,"offset":308},"end":{"line":6,"column":291,"offset":323},"indent":[]},"value":"devlog.bash","alias":"devlog.bash"},{"from":{"fname":"devlog.path","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":6,"column":312,"offset":344},"end":{"line":6,"column":327,"offset":359},"indent":[]},"value":"devlog.bash","alias":"devlog.bash"}],"anchors":{"bash-aliases":{"type":"header","text":"Bash Aliases","value":"bash-aliases","line":10,"column":0,"depth":2},"introduction":{"type":"header","text":"Introduction","value":"introduction","line":16,"column":0,"depth":2},"the-shebang":{"type":"header","text":"The Shebang","value":"the-shebang","line":26,"column":0,"depth":2},"comments":{"type":"header","text":"Comments","value":"comments","line":43,"column":0,"depth":2},"running-bash-scripts":{"type":"header","text":"Running Bash Scripts","value":"running-bash-scripts","line":48,"column":0,"depth":2},"variables":{"type":"header","text":"Variables","value":"variables","line":65,"column":0,"depth":2},"constants":{"type":"header","text":"Constants","value":"constants","line":88,"column":0,"depth":2},"create-your-first-bash-script":{"type":"header","text":"Create Your First Bash Script","value":"create-your-first-bash-script","line":94,"column":0,"depth":2},"user-input":{"type":"header","text":"User Input","value":"user-input","line":118,"column":0,"depth":2},"special-variables-and-positional-arguments":{"type":"header","text":"Special Variables and Positional Arguments","value":"special-variables-and-positional-arguments","line":130,"column":0,"depth":2},"if-elif-and-else-statements":{"type":"header","text":"If, Elif and Else Statements","value":"if-elif-and-else-statements","line":148,"column":0,"depth":2},"-vs-":{"type":"header","text":"[] vs [[]]","value":"-vs-","line":162,"column":0,"depth":2},"testing-conditions-for-numbers":{"type":"header","text":"Testing Conditions For Numbers","value":"testing-conditions-for-numbers","line":168,"column":0,"depth":2},"multiple-conditions-and-nested-if-statements":{"type":"header","text":"Multiple Conditions and Nested If Statements","value":"multiple-conditions-and-nested-if-statements","line":172,"column":0,"depth":2},"command-subsitution":{"type":"header","text":"Command Subsitution","value":"command-subsitution","line":179,"column":0,"depth":2},"comparing-strings-in-if-statements":{"type":"header","text":"Comparing Strings in If Statements","value":"comparing-strings-in-if-statements","line":209,"column":0,"depth":2},"for-loop":{"type":"header","text":"For Loop","value":"for-loop","line":226,"column":0,"depth":2},"examples":{"type":"header","text":"Examples","value":"examples","line":235,"column":0,"depth":3},"for-loops-like-in-programming-langauges":{"type":"header","text":"For Loops Like In Programming Langauges","value":"for-loops-like-in-programming-langauges","line":301,"column":0,"depth":3},"while-loops":{"type":"header","text":"While Loops","value":"while-loops","line":312,"column":0,"depth":2},"examples-1":{"type":"header","text":"Examples","value":"examples-1","line":339,"column":0,"depth":3},"case-statements":{"type":"header","text":"Case Statements","value":"case-statements","line":353,"column":0,"depth":2},"examples-2":{"type":"header","text":"Examples","value":"examples-2","line":381,"column":0,"depth":3},"functions":{"type":"header","text":"Functions","value":"functions","line":433,"column":0,"depth":2},"arguments":{"type":"header","text":"Arguments","value":"arguments","line":453,"column":0,"depth":3},"returns":{"type":"header","text":"Returns","value":"returns","line":473,"column":0,"depth":3},"variable-scope-in-functions":{"type":"header","text":"Variable Scope in Functions","value":"variable-scope-in-functions","line":505,"column":0,"depth":2},"select":{"type":"header","text":"Select","value":"select","line":527,"column":0,"depth":2},"examples-3":{"type":"header","text":"Examples","value":"examples-3","line":563,"column":0,"depth":2},"resources":{"type":"header","text":"Resources","value":"resources","line":569,"column":0,"depth":2}},"children":[],"parent":"9gtn7g40cvqui0sifl1s7t5","data":{}},"body":"<h1 id=\"bash\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#bash\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Bash</h1>\n<p>Bash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. First released in 1989, it has been used as the default login shell for most Linux distributions. Bash was one of the first programs <a title=\"Private\" style=\"color: brown\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\">resources.people.Linus Torvalds (Private)</a> ported to Linux, alongside GCC.</p>\n<h2 id=\"bash-aliases\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#bash-aliases\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Bash Aliases</h2>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Aliases</span></div>\n<a href=\"/notes/qj2j8vs4rumzknty271dz04\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">â†’</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><ul>\n<li>Areas: <a href=\"/notes/owoutsv5dicylguol2odc3e\">Linux</a></li>\n</ul>\n<hr>\n<ul>\n<li>Aliases for commands</li>\n<li>Nicknames for your pipelines</li>\n<li>To get started you need a file in your user's <code>Home</code> dir named <code>.bash_aliases</code></li>\n<li>Write the command inside the <code>.bash_aliases</code> file after writing <code>alias aliasName='command1 -opt args | command2 -opt args ...'</code> or alias for command that don't accept <a href=\"/notes/n4ernfsrloq7zjrscm8t5rc\">Redirecting stdin &#x26; stderr</a> can be acheived by <code>alias aliasName='xargs command -opt args...'</code></li>\n<li>Example:</li>\n</ul>\n<p><code>alias getdates='date | tee /home/user/date.txt | cut -d \" \" -f 1 | tee /home/user/day.txt | xargs echo hello'</code></p>\n<ul>\n<li>You can also build piplines using multiple aliases, the first command in an alias should accept <a href=\"/notes/n4ernfsrloq7zjrscm8t5rc\">Redirecting stdin &#x26; stderr</a></li>\n<li>Terminal will have to be rebooted after creating an alias.</li>\n</ul>\n<h2 id=\"list-all-aliases\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#list-all-aliases\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>List all aliases</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span>\n</code></pre>\n<h2 id=\"escape-an-alias--run-the-original-command\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#escape-an-alias--run-the-original-command\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Escape an alias / run the original command</h2>\n<p>Use <code>\\</code> to escape an alias</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span>ls\n</code></pre>\n<h2 id=\"create-an-alias\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#create-an-alias\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Create an alias</h2>\n<p>This will create an alias for the existing session. To make aliases persist in all of your user session, create them inside in your <code>~/.zshrc</code>, <code>~/.bashrc</code>, <code>~/.bash_profile</code> (and reload the shell or run <code>source ~/.zshrc</code>).</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ls</span><span class=\"token operator\">=</span><span class=\"token string\">\"ls -ltr\"</span>\n</code></pre>\n<h2 id=\"remove-an-alias\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#remove-an-alias\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Remove an alias</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">unalias</span> <span class=\"token function\">ls</span>\n</code></pre></div></div><p></p><p></p>\n<hr>\n<h2 id=\"introduction\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#introduction\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Introduction</h2>\n<ul>\n<li>To check what shell was started use <code>echo $0</code></li>\n<li>List all installed shells <code>cat /etc/shells</code></li>\n<li>Check each user's default shell <code>cat /etc/passwd</code> last column</li>\n</ul>\n<p>A shell script is an executable text file that contains commands, variables, functions, loops and so on that are executed sequentially.</p>\n<p>It is widely used for automating repetitive tasks, customize administrative tasks, create your own powertools or small applications. Other examples of scripting can be found in: monitoring the system, data backup/restore, email based alert system, security auditing.</p>\n<h2 id=\"the-shebang\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#the-shebang\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>The Shebang</h2>\n<p>The Shebang is made of <code>#!</code> is followed by the path of the interpreter.</p>\n<p><code>#!/bin/bash</code></p>\n<p>For executable scripts the system expects The Shebang in the first line of the script that indicates which program to run as the interpreter with the script file as the argument.\nBasically, to indicate what program will run the file whether bash, python, php or other interpreters.</p>\n<p>If you execute a script without the shebang the interpreter will use the default shell.</p>\n<p>Run <code>which bash</code> <code>which -a bash</code> to find the location of the interpreter.</p>\n<p>When using Python as the interpreter for a script</p>\n<p><code>#!/usr/bin/python3</code> will be the first line of the script(with the python code)</p>\n<h2 id=\"comments\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#comments\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Comments</h2>\n<p>Bash will ignore everything written after the <code>#</code> symbol. The only exception being The Shebang\nBash doesn't support multi line commenting. See <a href=\"/notes/97g4jykiuew2z1su0fhxz0l\">Here Document</a></p>\n<h2 id=\"running-bash-scripts\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#running-bash-scripts\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Running Bash Scripts</h2>\n<ul>\n<li>\n<p>Make it executable</p>\n<ul>\n<li><code>chmod +x script.sh</code></li>\n</ul>\n</li>\n<li>\n<p>Run it with its relative path using <code>./script.sh</code></p>\n</li>\n<li>\n<p>Or run it with its absolute path</p>\n<ul>\n<li>The script will run in a sub shell</li>\n</ul>\n</li>\n<li>\n<p>You can also pass the name of the interpreter before the script(this will make the script work even if you don't explicity give it execution permission) such as:</p>\n<ul>\n<li><code>bash script.sh</code></li>\n<li><code>python3 script.py</code></li>\n</ul>\n</li>\n<li>\n<p><code>source script.sh</code> or <code>. script.sh</code></p>\n<ul>\n<li>Will make the script run in the current shell.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"variables\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#variables\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Variables</h2>\n<p>Variable is a name of a memory location where a value which can be manipulated is stored.</p>\n<ul>\n<li><code>foo=bar</code> space before and after <code>=</code> assignment operator is not allowed.</li>\n<li>If the value of the variable is a string that contains spaces, enclose it with <code>\" \"</code> double quotes.</li>\n<li>Bash is a weakly typed langauge and doesn't require you to define any data type at variable declaration.</li>\n<li>There are no floating point numbers in bash. Only integers.</li>\n<li>Variable names cannot start with a number nor can they have special characters in them.</li>\n<li>It can contain an underscore or different case.</li>\n<li>Giving a value to a variable is called assigning variable a value.</li>\n<li>Retrieving a value stored in a variable is called referencing.</li>\n<li>Preceed a variable with <code>$</code> to access it's value.</li>\n<li>Variable name is not referenced if single quotes are used (such as in an echo statement).</li>\n<li>Use backslash to escape a reserved character's role such as <code>\\$PATH</code>.</li>\n<li>A variable can reference value from an existing variable <code>newVar=\"$oldVar\"</code></li>\n</ul>\n<p>Use <code>set</code> command to retrieve value to get all shell variables and functions.</p>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Environment Variable</span></div>\n<a href=\"/notes/o729gsazu87le197nswwxtp\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">â†’</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><ul>\n<li>Areas: <a href=\"/notes/owoutsv5dicylguol2odc3e\">Linux</a></li>\n</ul>\n<hr>\n<ul>\n<li>They're defined for the current shell and are inherited by any child shells or processes.</li>\n<li>They're used to pass information to process that are spawned from the current shell.</li>\n<li>Displayed using <code>env</code> or <code>printenv</code></li>\n<li><a href=\"/notes/iicnw4qgra6rr5f6k4dlw3z\">$PATH</a> is such an example</li>\n<li>When assigning multiple values to a variable, its common to separate them using a colon <code>:</code></li>\n<li>By convention - env variables are written in uppercase letters.</li>\n<li>Usually they're not used directly; instead they're referenced by individual applications/services.\n<ul>\n<li><code>$HOME</code> is such an example</li>\n</ul>\n</li>\n<li>Run <code>env | less</code> to list all env variable set on your machine.</li>\n<li>You can also use <code>printenv</code> to print variables\n<ul>\n<li><code>printenv SHELL PWD LC_TIME</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"create-a-new-env-variable\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#create-a-new-env-variable\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Create a new env variable</h2>\n<ul>\n<li>Add a line: <code>export VARNAME=VARVAL</code> in your <code>~/.zshrc</code></li>\n<li>To create a system wide variable available for all users; declare the variable in <code>/etc/profile</code> or <code>/etc/bash.bashrc</code></li>\n<li>There is also <code>/etc/environment</code> in which you can set env variables each on a new line</li>\n</ul>\n</div></div><p></p><p></p>\n<p></p><p></p><div class=\"portal-container\">\n<div class=\"portal-head\">\n<div class=\"portal-backlink\">\n<div class=\"portal-title\">From <span class=\"portal-text-title\">Shell Variables</span></div>\n<a href=\"/notes/vh22ssk485h0u5nlfme04ic\" class=\"portal-arrow\">Go to text <span class=\"right-arrow\">â†’</span></a>\n</div>\n</div>\n<div id=\"portal-parent-anchor\" class=\"portal-parent\" markdown=\"1\">\n<div class=\"portal-parent-fader-top\"></div>\n<div class=\"portal-parent-fader-bottom\"></div><ul>\n<li>Areas: <a href=\"/notes/owoutsv5dicylguol2odc3e\">Linux</a></li>\n</ul>\n<hr>\n<ul>\n<li>They're contained exclusively within the shell in which they were set or defined.</li>\n<li>Displayed using <code>set</code></li>\n<li>Running <code>set</code> command will display shell functions as well as to display all available variables.</li>\n<li>To display only shell and <a href=\"/notes/o729gsazu87le197nswwxtp\">Environment Variable</a> - specify set to operate in <a href=\"/notes/ru54kuj1p2c7rpvy2ngv0sp\">POSIX</a> mode\n<ul>\n<li><code>set -o posix</code></li>\n</ul>\n</li>\n</ul>\n</div></div><p></p><p></p>\n<h2 id=\"constants\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#constants\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Constants</h2>\n<p>Declare constants(variables whose values doesn't change) using <code>declare -r constName=\"constVal\"</code></p>\n<p>You cannnot <code>unset</code> or delete a read-only variable.</p>\n<h2 id=\"create-your-first-bash-script\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#create-your-first-bash-script\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Create Your First Bash Script</h2>\n<ol>\n<li><code>vim first_script.sh</code>\n<ul>\n<li>some people consider giving extensions to an executable as a bad practice.</li>\n</ul>\n</li>\n<li>complete the script</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p new_dir\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"yay! first script\"</span> <span class=\"token operator\">></span> new_dir/file.txt\n<span class=\"token function\">ls</span> -l new_dir\n<span class=\"token function\">cat</span> new_dir/file.txt\n</code></pre>\n<ol start=\"3\">\n<li>Save and exit</li>\n<li>Give permissions for execution</li>\n</ol>\n<p><code>chmod 700 first_script.sh</code></p>\n<ol start=\"5\">\n<li>Execute it using relative path</li>\n</ol>\n<p><code>./first_script.sh</code></p>\n<p>If you don't use relative path, shell will throw an error because it would be looking for commands and scripts from the <a href=\"/notes/iicnw4qgra6rr5f6k4dlw3z\">$PATH</a> variable.</p>\n<h2 id=\"user-input\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#user-input\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>User Input</h2>\n<ul>\n<li>\n<p><code>read</code> is responsible for collecting user input - it'll stop a program until the user has given an input and has returned the input with the RETURN or ENTER Key</p>\n</li>\n<li>\n<p>Create a new variable with some prompt</p>\n</li>\n</ul>\n<p><code>read -p \"some prompt for user: \" $varName</code></p>\n<ul>\n<li>Create a new variable that doesn't display the input (like entering password)</li>\n</ul>\n<p><code>read -s -p \"safely enter value: \" $varName</code></p>\n<h2 id=\"special-variables-and-positional-arguments\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#special-variables-and-positional-arguments\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Special Variables and Positional Arguments</h2>\n<p>Lets take the following command for example</p>\n<p><code>./script filename1 dir1 10.0.0.1</code></p>\n<p>There are predefined variables available such:</p>\n<p><code>$0</code> is the name of the script itself (<code>./script.sh</code>)\n<code>$1</code> is the first positional argument (<code>filename</code>)\n<code>$2</code> is the second positional argument (<code>dir1</code>)\n<code>$3</code> is the third positional argument (<code>10.0.0.1</code>)\n<code>$9</code> would be the ninth and after it arguments must be enclosed in <code>{}</code> curly braces such as <code>${10}</code> for the tenth</p>\n<p><code>$#</code> is the number of the positional arguments\n<code>\"$*\"</code> is the string representation of all positional arguments: <code>$1</code> <code>$2</code> <code>$3</code> ...\n<code>$?</code> is the most recent foreground command exit status</p>\n<h2 id=\"if-elif-and-else-statements\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#if-elif-and-else-statements\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>If, Elif and Else Statements</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span>some condition is true<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n    // execute this code\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span>some other condition is true<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n    // execute this code\n<span class=\"token keyword\">else</span>\n    // execute this code\n<span class=\"token keyword\">fi</span>\n</code></pre>\n<h2 id=\"-vs-\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#-vs-\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><code>[]</code> vs <code>[[]]</code></h2>\n<p><code>[]</code> is the old way used for testing conditions.</p>\n<p><code>[[]]</code> is the new way of testing conditions and is considered to be safer. Double square brackets prevent word splitting or string variables that contain spaces, you don't need to double qoute string variables even though its a good practice. It also have features like <a href=\"/notes/wefzur43lxsejxhpzya0oz1\">regular expression</a> matching.</p>\n<h2 id=\"testing-conditions-for-numbers\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#testing-conditions-for-numbers\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Testing Conditions For Numbers</h2>\n<p>Run <code>man test</code> to list all available testing (comparison operators for integer comparison)</p>\n<h2 id=\"multiple-conditions-and-nested-if-statements\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#multiple-conditions-and-nested-if-statements\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Multiple Conditions and Nested If Statements</h2>\n<p>Using local operators allow you to use multiple conditions in the if statement.</p>\n<p><code>&#x26;&#x26;</code> is the AND operator\n<code>||</code> is the OR operator</p>\n<h2 id=\"command-subsitution\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#command-subsitution\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Command Subsitution</h2>\n<p>In the following example, the <code>date</code> command was executed and the output is stored inside the variable <code>now</code>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">now</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span>\n</code></pre>\n<p>If the output is going to be a string, it is recommended to enclose it inside double quotes.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">now</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span>\"</span>\n</code></pre>\n<p>The other way of doing command subsitution is:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token variable\">$(</span><span class=\"token function\">who</span><span class=\"token punctuation\">)</span><span class=\"token variable\">`</span></span>\n\n<span class=\"token comment\"># this is same as:</span>\n\n<span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">who</span><span class=\"token variable\">`</span></span>\"</span>\n</code></pre>\n<p>You can substitute the entire command line, which can be multiple commands piped together.</p>\n<p><code>ps -ef | grep bash</code></p>\n<p><code>output=\"$(ps -ef | grep bash)\"</code></p>\n<h2 id=\"comparing-strings-in-if-statements\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#comparing-strings-in-if-statements\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Comparing Strings in If Statements</h2>\n<p>Two strings are equal if their length is same and contains the same sequence of characters in the same order.</p>\n<ul>\n<li>\n<p>The comparsion operator is a single <code>=</code> sign when using if statement with <code>[]</code> single square brackets and its <code>==</code> when using double square brackets <code>[[]]</code></p>\n</li>\n<li>\n<p>The inequality operator is <code>!=</code></p>\n</li>\n</ul>\n<p>One of the approach to check for substring inside a string is to surround the substring with asterisk <code>*</code> to make it match all the characters.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">str1</span><span class=\"token operator\">=</span><span class=\"token string\">\"Linux is amazing\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"str1\"</span> <span class=\"token operator\">==</span> *<span class=\"token string\">\"Linux\"</span>*<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<ul>\n<li><code>-n</code> returns true if the string length is NON zero and <code>-z</code> returns true if the string length is zero.</li>\n</ul>\n<h2 id=\"for-loop\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#for-loop\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>For Loop</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">item</span> <span class=\"token keyword\">in</span> LIST\n<span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span>\n</code></pre>\n<h3 id=\"examples\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#examples\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Examples</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">os</span> <span class=\"token keyword\">in</span> Ubuntu CentOS <span class=\"token string\">\"MX Linux\"</span> Kali Manjaro\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"os is <span class=\"token variable\">$os</span>\"</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<hr>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">num</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">..</span><span class=\"token number\">7</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"num is <span class=\"token variable\">$num</span>\"</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<hr>\n<p>Defining increment for a range</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">num</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"num is <span class=\"token variable\">$num</span>\"</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<hr>\n<p>Going through the current directory, displaying the contents of the files</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">item</span> <span class=\"token keyword\">in</span> ./*\n<span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -f <span class=\"token string\">\"<span class=\"token variable\">$item</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">then</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Displaying the contents of <span class=\"token variable\">$item</span>\"</span>\n      <span class=\"token function\">sleep</span> <span class=\"token number\">1</span>\n      <span class=\"token function\">cat</span> <span class=\"token variable\">$item</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"##########\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<hr>\n<p>Rename all files in the current directory ending in <code>.txt</code> extension by adding a string at the start of the file name</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> *.txt\n<span class=\"token keyword\">do</span>\n  <span class=\"token function\">mv</span> <span class=\"token string\">\"<span class=\"token variable\">$file</span>\"</span> <span class=\"token string\">\"renamed_<span class=\"token variable\">$file</span>\"</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<h3 id=\"for-loops-like-in-programming-langauges\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#for-loops-like-in-programming-langauges\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>For Loops Like In Programming Langauges</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&#x3C;=</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"i = <span class=\"token variable\">$i</span>\"</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<h2 id=\"while-loops\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#while-loops\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>While Loops</h2>\n<p>It is used to execute a set of commands as long as the given condition evaluates to true.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> CONDITION\n<span class=\"token keyword\">do</span>\n  COMMANDS\n<span class=\"token keyword\">done</span>\n</code></pre>\n<p>Use <code>:</code> to always return true</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">:</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token assign-left variable\">output</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>pgrep -l $1<span class=\"token variable\">)</span></span>\"</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -n <span class=\"token string\">\"<span class=\"token variable\">$output</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">then</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The process  <span class=\"token entity\" title=\"\\&#x22;\">\\\"</span><span class=\"token variable\">$1</span>\"</span><span class=\"token punctuation\">\\</span> is running.\n  <span class=\"token keyword\">else</span>\n      <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The process  <span class=\"token entity\" title=\"\\&#x22;\">\\\"</span><span class=\"token variable\">$1</span>\"</span><span class=\"token punctuation\">\\</span> is NOT running.\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<h3 id=\"examples-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#examples-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Examples</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$i</span> -lt <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"i: <span class=\"token variable\">$i</span>\"</span>\n  <span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span> <span class=\"token comment\"># let i = i++</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<h2 id=\"case-statements\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#case-statements\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Case Statements</h2>\n<p>The case construct allows us to test string and numbers and is infact a simpler form of bash if, elif, else statement.</p>\n<p>Case is similar to Switch statements in other programming languages.</p>\n<p>It is not a loop, it doesn't execute a block of code <code>n</code> number of times. Instead, bash shell checks the conditions and controls the flow of the program.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">case</span> EXPRESSION <span class=\"token keyword\">in</span>\n  PATTERN_1<span class=\"token punctuation\">)</span>\n    STATEMENTS\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  PATTERN_2<span class=\"token punctuation\">)</span>\n   STATEMENTS\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  PATTERN_3<span class=\"token punctuation\">)</span>\n    STATEMENTS\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  PATTERN_N<span class=\"token punctuation\">)</span>\n    STATEMENTS\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n    STATEMENTS\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span>\n</code></pre>\n<h3 id=\"examples-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#examples-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Examples</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token string\">\"Enter your favourite pet: \"</span>\n<span class=\"token builtin class-name\">read</span> PET\n\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$PET</span>\"</span> <span class=\"token keyword\">in</span>\n    dog<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Your favourite pet is dog\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cat</span><span class=\"token operator\">||</span>CAT<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"You like cats\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    fist<span class=\"token operator\">||</span><span class=\"token string\">\"African turtle\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Fish or turtles are great\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    *<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Your favourite pet is unknown\"</span>\n<span class=\"token keyword\">esac</span>\n</code></pre>\n<hr>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$#</span> -ne <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Run the script with 2 arguments: Signal and PID\"</span>\n    <span class=\"token builtin class-name\">exit</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token keyword\">in</span>\n      <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Sending the SIGHUP signal to <span class=\"token variable\">$2</span>\"</span>\n        <span class=\"token function\">kill</span> -SIGHUP <span class=\"token variable\">$2</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Sending the SIGINT signal to <span class=\"token variable\">$2</span>\"</span>\n        <span class=\"token function\">kill</span> -SIGINT <span class=\"token variable\">$2</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Sending the SIGTERM signal to <span class=\"token variable\">$2</span>\"</span>\n        <span class=\"token function\">kill</span> -15 <span class=\"token variable\">$2</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n      *<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Signal number <span class=\"token variable\">$1</span> will not be delivered\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span>\n</code></pre>\n<h2 id=\"functions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#functions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Functions</h2>\n<p>There are two different formats for declaring a function.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">print_something</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I am a function\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function-name function\">display_something</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello world!\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To call a function just write it's name without any paranethesis <code>display_something</code></p>\n<h3 id=\"arguments\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#arguments\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Arguments</h3>\n<p>In bash you cannot pass arguments through the paranthesis, they're only for decoration.\nTo pass any information to the function use arguments like they're passed to a command.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token function-name function\">create_files</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Creating <span class=\"token variable\">$1</span>\"</span>\n  <span class=\"token function\">touch</span> <span class=\"token variable\">$1</span>\n  <span class=\"token function\">chmod</span> <span class=\"token number\">400</span> <span class=\"token variable\">$1</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Creating <span class=\"token variable\">$2</span>\"</span>\n  <span class=\"token function\">touch</span> <span class=\"token variable\">$2</span>\n  <span class=\"token function\">chmod</span> <span class=\"token number\">600</span> <span class=\"token variable\">$2</span>\n<span class=\"token punctuation\">}</span>\n\ncreate_files file1.txt file2.txt\n</code></pre>\n<h3 id=\"returns\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#returns\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Returns</h3>\n<p>Bash doesn't allow you to return a value of a function, doing so using the return keyword, we're setting the status of the command executed or of the function. $? contains the status of previously run command or function.</p>\n<p>Typically, a value of <code>0</code> means everything went successfully and a non zero value means something did not went succesfully.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token function-name function\">create_files</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Creating <span class=\"token variable\">$1</span>\"</span>\n  <span class=\"token function\">touch</span> <span class=\"token variable\">$1</span>\n  <span class=\"token function\">chmod</span> <span class=\"token number\">400</span> <span class=\"token variable\">$1</span>\n  <span class=\"token builtin class-name\">return</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span>\n\ncreate_files file1.txt\n</code></pre>\n<p>To get a real \"return\" value like in other programming languages, you can try command substitution.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">lines_in_file</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">grep</span> -c <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token assign-left variable\">n</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>lines_in_file <span class=\"token string\">\"usb\"</span> <span class=\"token string\">\"/var/log/dmesg\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$n</span>\n</code></pre>\n<h2 id=\"variable-scope-in-functions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#variable-scope-in-functions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Variable Scope in Functions</h2>\n<p>Scope refers to which part of a script the variable is \"visible\". In bash, all variables by default are global; they're visible everywhere inside a script.</p>\n<p>If you want to define a local variable within the function body, use the <code>local</code> keyword before declaring variable.\nIt is considered a good practice to use local variables in order to contain everything inside a function.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">var1</span><span class=\"token operator\">=</span><span class=\"token string\">\"AA\"</span>\n<span class=\"token assign-left variable\">var2</span><span class=\"token operator\">=</span><span class=\"token string\">\"BB\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">func1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token assign-left variable\">var1</span><span class=\"token operator\">=</span><span class=\"token string\">\"XX\"</span>\n  <span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">var2</span><span class=\"token operator\">=</span><span class=\"token string\">\"YY\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Inside func1: var1=<span class=\"token variable\">$var1</span> and var2=v<span class=\"token variable\">$var2</span>\"</span>\n<span class=\"token punctuation\">}</span>\nfunc1\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"After calling func1: var1=<span class=\"token variable\">$var1</span> and var2=v<span class=\"token variable\">$var2</span>\"</span>\n</code></pre>\n<h2 id=\"select\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#select\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Select</h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">ITEM</span> <span class=\"token keyword\">in</span> LIST\n<span class=\"token keyword\">do</span>\n  commands\n<span class=\"token keyword\">done</span>\n</code></pre>\n<ul>\n<li>ITEM is a user defined variable and the LIST is a series of strings, numbers or output of commands.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">COUNTRY</span> <span class=\"token keyword\">in</span> Germany India <span class=\"token string\">\"United Kingdom\"</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Country is <span class=\"token variable\">$COUNTRY</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Your choice is <span class=\"token environment constant\">$REPLY</span>\"</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<p>Use <code>PS3</code> to define a prompt</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS3</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"Choose your country: \"</span>\n<span class=\"token keyword\">select</span> <span class=\"token for-or-select variable\">COUNTRY</span> <span class=\"token keyword\">in</span> Germany India <span class=\"token string\">\"United Kingdom\"</span>\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Country is <span class=\"token variable\">$COUNTRY</span>\"</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Your choice is <span class=\"token environment constant\">$REPLY</span>\"</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<ul>\n<li>You can use <code>select</code> with <code>case</code> and <code>if</code> statements</li>\n</ul>\n<h2 id=\"examples-3\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#examples-3\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Examples</h2>\n<ul>\n<li><a href=\"/notes/kw0o7kw0m2y89681r3nv66d\">Connection Testing</a></li>\n<li><a href=\"/notes/h2nd1ugulcavl8zrn3d054x\">Dropping a List of IP addresses Using a For Loop</a></li>\n<li><a href=\"/notes/o0ecer01zc0czhdzo6o8o5b\">System Administration Script using Menus</a></li>\n</ul>\n<h2 id=\"resources\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#resources\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Resources</h2>\n<ul>\n<li><a href=\"https://www.linuxjournal.com/content/developing-console-applications-bash\">Developing Console Applications with Bash | Linux Journal</a></li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/522ww47pqvt6y0yj8zparmy\">DevOps</a></li>\n<li><a href=\"/notes/uua60b3x9in6imfnwfa5f7t\">Everything about Linux Terminal</a></li>\n<li><a href=\"/notes/oteklwrg0wgbzwqyjey8ijy\">jobs</a></li>\n<li><a href=\"/notes/iicnw4qgra6rr5f6k4dlw3z\">PATH Variable</a></li>\n</ul>","noteIndex":{"id":"3nfl4nvv516muyzozhcwrw8","title":"/root","desc":"","updated":1655559901157,"created":1637610830605,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"581715455a6f0f7a699209e8521b4acf","links":[{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"archive.about","alias":"my","position":{"start":{"line":4,"column":9,"offset":37},"end":{"line":4,"column":29,"offset":57},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"archive.about"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"tags.areas","alias":"#areas","position":{"start":{"line":20,"column":111,"offset":1051},"end":{"line":20,"column":117,"offset":1057},"indent":[]},"xvault":false,"to":{"fname":"tags.areas"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"tags.areas","alias":"#areas","position":{"start":{"line":21,"column":3,"offset":1198},"end":{"line":21,"column":9,"offset":1204},"indent":[]},"xvault":false,"to":{"fname":"tags.areas"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes","alias":"swipes","position":{"start":{"line":27,"column":3,"offset":1724},"end":{"line":27,"column":13,"offset":1734},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.quotes","alias":"quotes","position":{"start":{"line":27,"column":48,"offset":1769},"end":{"line":27,"column":72,"offset":1793},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.quotes"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.excerpts","alias":"excerpts","position":{"start":{"line":27,"column":74,"offset":1795},"end":{"line":27,"column":102,"offset":1823},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.excerpts"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.sayings","alias":"sayings","position":{"start":{"line":27,"column":104,"offset":1825},"end":{"line":27,"column":130,"offset":1851},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.sayings"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.phrases","alias":"phrases","position":{"start":{"line":27,"column":132,"offset":1853},"end":{"line":27,"column":158,"offset":1879},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.phrases"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"resources.people","alias":"others","position":{"start":{"line":27,"column":214,"offset":1935},"end":{"line":27,"column":241,"offset":1962},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"resources.people"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"inbox.webmark","alias":"webmark","position":{"start":{"line":31,"column":235,"offset":2463},"end":{"line":31,"column":260,"offset":2488},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"inbox.webmark"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"slipbox.Ontology","alias":"slipbox.Ontology","position":{"start":{"line":55,"column":3,"offset":3735},"end":{"line":55,"column":23,"offset":3755},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"slipbox.Ontology"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"archive.about","alias":"About me","position":{"start":{"line":60,"column":3,"offset":3963},"end":{"line":60,"column":29,"offset":3989},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"archive.about"}}],"anchors":{"welcome-to-noetic-noggin":{"type":"header","text":"Welcome to Noetic Noggin","value":"welcome-to-noetic-noggin","line":8,"column":0,"depth":1},"principles":{"type":"header","text":"Principles","value":"principles","line":18,"column":0,"depth":2},"all-notes-should-be-relative-to-me":{"type":"header","text":"All notes should be relative to me.","value":"all-notes-should-be-relative-to-me","line":20,"column":0,"depth":3},"gotta-capture-em-all":{"type":"header","text":"Gotta capture 'em all","value":"gotta-capture-em-all","line":30,"column":0,"depth":3},"dont-force-evolution":{"type":"header","text":"Don't force evolution","value":"dont-force-evolution","line":40,"column":0,"depth":3},"noise--signal":{"type":"header","text":"Noise & Signal","value":"noise--signal","line":45,"column":0,"depth":3},"why-do-any-of-this":{"type":"header","text":"Why do any of this?","value":"why-do-any-of-this","line":50,"column":0,"depth":3},"structure-of-this-wiki":{"type":"header","text":"Structure of this wiki","value":"structure-of-this-wiki","line":59,"column":0,"depth":2},"quicklinks":{"type":"header","text":"Quicklinks","value":"quicklinks","line":64,"column":0,"depth":2}},"children":["0yay2om15bsg2li2p6qgux7","05c4nnjqa92zx11ld6o0ytn","9gtn7g40cvqui0sifl1s7t5","ftbd1hknsd3ocd7jao26tn3","a1kmkdbpclaz5p6sykaw6kc","z121gkmqfo09m8r7jgnpfgn","gkqrr7xbt18xhi93dmjrwzj","ja2x4lrgejr9o9wvit0bd0d","luv39odkfibx3wdosvigwvy","vtvk3bi6o72w58oima9xzf3","yy652kvqrkfn9ipk07m40h4"],"parent":null,"data":{},"body":"\n# Welcome to Noetic Noggin\n\nThis is [[my|archive.about]] personal wiki and a commonplace book; notes by me, for me.\n\nðŸš§ Permanently under construction ðŸš§\n\n![](https://res.cloudinary.com/zubayr/image/upload/v1658499909/wiki/ajevkuyebljlxiblyst2.png)\n\nThis wiki was made possible with [dendron.so](https://dendron.so) and [obisidian.md](https://obsidian.md). Stored on [Github Repository](https://github.com/zubayrrr/dendron) and hosted on [Netlify](https://netlify.com) for free.\n\n## Principles\n\n### All notes should be relative to me.\n\n- All notes in principle are written for me; what I know about a subject, how I feel about a particular thing.\n- Opinions are fine as long as I feel strong epistemic confidence in the given opinion.\n- Don't over explain a note if it's not necessary, remember, these notes are for you and are relative to whatever knowledge you posses about the subject.\n- Read books and make an dedicated notes for them.\n- Listen podcasts but capture them inside a \"subject specific\" note or \"Map of Concept\" note or a note tagged #areas. Because making notes from podcasts can be tedious as they're not as well structured as books for consumption.(Whose merit is debatable.)\n- #areas are basically \"Map of Concept\" notes but I have recently come to the realization that its better to maintain them [Nikita Voloboev style](https://wiki.nikiv.dev/) but with heavy usage of transclusion and backlinking.\n  - \"Resources\" should be first processed and then mentioned inside the note, otherwise they should be left in inbox.\n\n### Gotta capture 'em all\n\n- Hog whatever information tickles your pickle([anything that gratifies one's intellectual curiosity](https://news.ycombinator.com/newsguidelines.html)).\n- [[swipes]] are interesting/useful bits of... [[quotes|swipes.quotes]], [[excerpts|swipes.excerpts]], [[sayings|swipes.sayings]], [[phrases|swipes.phrases]]. Essentially, ideas, opinions that are swiped off from [[others|resources.people]].\n- Make no distinction between \"your\" ideas and ideas of \"others\", because if you vibe with an idea; it's already yours.\n- But also remember \"If you've time to consume, you've time to produce.\".\n- Use [raindrop.io](https://raindrop.io) to manage your URL bookmarks.\n- If you need to bookmark a webpage or an article all together, use [MarkDownload](https://chrome.google.com/webstore/detail/markdownload-markdown-web/pcmpcfapbekmbjjkdalcgopdkipoggdi?hl=en-GB) to rip the entire page. Let's call it a [[webmark|inbox.webmark]]; it belong in the `/inbox`.\n- Similar process is employed for capturing tweets using [tweet-to-markdown](https://github.com/kbravh/tweet-to-markdown) and it also belongs in the `/inbox`.\n\n### Don't force evolution\n\n- Let your second brain evolve at it's own pace.\n- The structure should never be _too_ rigid because its meant to take form by itself.\n\n### Noise & Signal\n\n- While capturing ideas left and right is recommended, make sure you're not harming your periods of focus.\n- Have impenetrable focus periods (use Pomodoro method) where you only care about the work on hand and nothing else.\n\n### Why do any of this?\n\n- Because I can't remember everything - there's a lot of information around that interests me and there isn't enough working memory installed in me.\n- So, I make notes - to remember, to create, to meditate, to think.\n- A bodybuilder's portfolio is their body - my portfolio is my wiki.\n- Not only am I making - whatever I know - tangible by writing it down. I know exactly where to look if I ever forget something.\n- I am at the beginning of my learning adventures. When I look back at it, I will know where I came from and how my thoughts evolved over time.\n- Plus, its really fun to nerd out.\n\n## Structure of this wiki\n\n- [[slipbox.Ontology]] explains the structure of this wiki and the tags, backlinks used in it.\n- Dendron takes care of the structure and hierarchy(mostly), but I insist on using tags for backwards compatibility.\n\n## Quicklinks\n\n- [[About me|archive.about]]\n- [Github](https://github.com/zubayrrr)\n- [Twitter](https://twitter.com/zoobhalu)\n- [Blog](https://zubayrali.in)\n- [Guestbook](https://www.yourworldoftext.com/~zubayrali/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template","insertNote":{"initialValue":"templates"}},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableHandlebarTemplates":true,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"theme":"dark","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Noetic Noggin","description":"Personal Wiki / Digital Garden","author":"Zubayr Ali","twitter":"zoobhalu"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"siteUrl":"localhost:3000","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}