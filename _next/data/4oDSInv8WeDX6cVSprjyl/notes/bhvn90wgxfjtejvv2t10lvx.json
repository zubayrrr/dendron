{"pageProps":{"note":{"id":"bhvn90wgxfjtejvv2t10lvx","title":"Terraform in AWS","desc":"","updated":1656695175642,"created":1656601629287,"custom":{},"fname":"devlog.terraform aws","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"1bd9baa209fb80d84726ef0daa42759e","links":[{"type":"wiki","from":{"fname":"devlog.terraform aws","id":"bhvn90wgxfjtejvv2t10lvx","vaultName":"Dendron"},"value":"devlog.AWS EC2","alias":"devlog.AWS EC2","position":{"start":{"line":4,"column":16,"offset":40},"end":{"line":4,"column":34,"offset":58},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.AWS EC2"}},{"type":"wiki","from":{"fname":"devlog.terraform aws","id":"bhvn90wgxfjtejvv2t10lvx","vaultName":"Dendron"},"value":"devlog.nginx","alias":"devlog.nginx","position":{"start":{"line":5,"column":16,"offset":91},"end":{"line":5,"column":32,"offset":107},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.nginx"}},{"type":"wiki","from":{"fname":"devlog.terraform aws","id":"bhvn90wgxfjtejvv2t10lvx","vaultName":"Dendron"},"value":"devlog.docker","alias":"devlog.docker","position":{"start":{"line":5,"column":33,"offset":108},"end":{"line":5,"column":50,"offset":125},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"devlog.docker"}},{"from":{"fname":"areas.devops","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":143,"column":7,"offset":4228},"end":{"line":143,"column":31,"offset":4252},"indent":[]},"value":"devlog.terraform aws","alias":"devlog.terraform aws"},{"from":{"fname":"devlog.terraform","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":315,"column":1,"offset":10971},"end":{"line":315,"column":26,"offset":10996},"indent":[]},"value":"devlog.terraform aws"}],"anchors":{"steps":{"type":"header","text":"Steps","value":"steps","line":14,"column":0,"depth":2},"create-vpc-and-subnet":{"type":"header","text":"Create VPC and Subnet","value":"create-vpc-and-subnet","line":27,"column":0,"depth":2}},"children":[],"parent":"9gtn7g40cvqui0sifl1s7t5","data":{}},"body":"<h1 id=\"terraform-in-aws\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#terraform-in-aws\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Terraform in AWS</h1>\n<p>In this lab, we'll do:</p>\n<ul>\n<li>Provision an <a href=\"/notes/1h5mmmv2b68di6siwa31jvh\">AWS EC2</a> instance on AWS.</li>\n<li>Run a simple <a href=\"/notes/7jdwsm0maamijwmsnzebbwf\">Nginx</a> <a href=\"/notes/wf37vjntme0oklsx52ycrn4\">Docker</a> container on it.</li>\n<li>We'll do this on AWS infrastructure using Terraform (obviously).</li>\n</ul>\n<h2 id=\"steps\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#steps\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Steps</h2>\n<ol>\n<li>Create custom VPC</li>\n<li>Create custom Subnet</li>\n<li>Create Route table and Internet Gateway.\n<ul>\n<li>To connect the VPC to the internet.</li>\n<li>Allow traffic to and from VPC.</li>\n</ul>\n</li>\n<li>Deploy EC2 instance on the Subnet.</li>\n<li>Deploy ngnix Docker container.</li>\n<li>Create Security Group(Firewall), opening ports.\n<ul>\n<li>In order to access the Web Application.</li>\n<li>And also to SSH into that EC2 server.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"create-vpc-and-subnet\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#create-vpc-and-subnet\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Create VPC and Subnet</h2>\n<pre class=\"language-terraform\"><code class=\"language-terraform\">provider \"aws\" {\n  region = \"eu-central-1\"\n}\n\nvariable vpc_cidr_block {}\nvariable subnet_1_cidr_block {}\nvariable avail_zone {}\nvariable env_prefix {}\nvariable instance_type {}\nvariable ssh_key {}\nvariable my_ip {}\n\ndata \"aws_ami\" \"amazon-linux-image\" {\n  most_recent = true\n  owners      = [\"amazon\"]\n\n  filter {\n    name   = \"name\"\n    values = [\"amzn2-ami-hvm-*-x86_64-gp2\"]\n  }\n\n  filter {\n    name   = \"virtualization-type\"\n    values = [\"hvm\"]\n  }\n}\n\noutput \"ami_id\" {\n  value = data.aws_ami.amazon-linux-image.id\n}\n\nresource \"aws_vpc\" \"myapp-vpc\" {\n  cidr_block = var.vpc_cidr_block\n  tags = {\n      Name = \"${var.env_prefix}-vpc\"\n  }\n\n  # Route table is auto-generated for your VPC by AWS\n  # Default Network ACL - firewall configuration (applied to subnet in that VPC)\n}\n\nresource \"aws_subnet\" \"myapp-subnet-1\" {\n  vpc_id = aws_vpc.myapp-vpc.id\n  cidr_block = var.subnet_1_cidr_block\n  availability_zone = var.avail_zone\n  tags = {\n      Name = \"${var.env_prefix}-subnet-1\"\n  }\n}\n\nresource \"aws_security_group\" \"myapp-sg\" {\n# BTW you can also just use the default SG that was generated when VPC was created\n# resource \"aws_default_security_group\" \"default-sg\" { # you really only need to change this, rest remains the same\n  name   = \"myapp-sg\"\n  vpc_id = aws_vpc.myapp-vpc.id\n\n# Defining traffic rules for firewall\n  ingress {\n    from_port   = 22\n    to_port     = 22 # you can even set a range of ports but we only need 22\n    protocol    = \"tcp\"\n    cidr_blocks = [var.my_ip]\n  }\n\n  ingress {\n    from_port   = 8080\n    to_port     = 8080\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    # allow any traffic to leave server\n    from_port       = 0\n    to_port         = 0\n    protocol        = \"-1\" # any protocols\n    cidr_blocks     = [\"0.0.0.0/0\"]\n    prefix_list_ids = []\n  }\n\n  tags = {\n    Name = \"${var.env_prefix}-sg\"\n  }\n}\n\nresource \"aws_internet_gateway\" \"myapp-igw\" {\n\tvpc_id = aws_vpc.myapp-vpc.id\n\n    # Think of it as a virtual modem\n    # Even though it has to be created before Route table, you don't necessarily have to put this block before the route table block.\n    # Terraform knows in which sequence it needs to create components.\n    tags = {\n     Name = \"${var.env_prefix}-internet-gateway\"\n   }\n}\n\nresource \"aws_route_table\" \"myapp-route-table\" {\n   vpc_id = aws_vpc.myapp-vpc.id\n\n    # Think of it as a virtual router inside your VPC\n    # Create a new Route table as it is a best practice(not going with the default that comes with VPC creation)\n    # default route, mapping VPC CIDR block to \"local\", created implicitly and cannot be specified.\n   route {\n     cidr_block = \"0.0.0.0/0\"\n     gateway_id = aws_internet_gateway.myapp-igw.id\n   }\n\n   # Route table basically routes traffic within your VPC  (local)\n   # You have to add an Internet Gateway to connect your VPC to the internet\n   # Check \"routes\" in your Route Table for 0.0.0.0/0 (destination) and there has to be an Internet Gateway(as target)\n\n   tags = {\n     Name = \"${var.env_prefix}-route-table\"\n   }\n }\n\n# Associate subnet with Route Table\n# All the resource that will be deployed in the subnet, all the traffic will be handled by the route table once the association has been made.\nresource \"aws_route_table_association\" \"a-rtb-subnet\" {\n  subnet_id      = aws_subnet.myapp-subnet-1.id\n  route_table_id = aws_route_table.myapp-route-table.id\n}\n\n# To use the default route table instead of creating a new one\n\n# resource \"aws_default_route_table\" \"main-rtb\" {\n#   # get default route table id by terraform state show aws_vpc.myapp-vpc(it has to exist) to list all attribute it has\n#   default_route_table_id = aws_vpc.myapp-vpc.default_route_table_id\n#   route {\n#      cidr_block = \"0.0.0.0/0\"\n#      gateway_id = aws_internet_gateway.myapp-igw.id\n#    }\n\n#   tags = {\n#      Name = \"${var.env_prefix}-main-rtb\"\n#    }\n\n# In this case, you don't need to add subnet association as \"main\" route tables as default subnet gets auto-assigned\n# }\n\n\n# automated key generation\nresource \"aws_key_pair\" \"ssh-key\" {\n  key_name   = \"myapp-key\"\n  # public_key = var.my_public_key\n  public_key = file(var.ssh_key) # this should exist locally - you should create it yourself.\n}\n\noutput \"server-ip\" {\n    value = aws_instance.myapp-server.public_ip\n}\n\nresource \"aws_instance\" \"myapp-server\" {\n  # required\n  ami                         = data.aws_ami.amazon-linux-image.id\n  instance_type               = var.instance_type\n\n  # create a public-private key sshing into the EC2 instance, don't forget to `chmod 400 ~/.ssh/.pem` after moving it to `~/.ssh` - this applies only when you manually create it\n\n  key_name                    = \"myapp-key\"\n\n  # optional\n  associate_public_ip_address = true\n  subnet_id                   = aws_subnet.myapp-subnet-1.id\n  vpc_security_group_ids      = [aws_security_group.myapp-sg.id]\n  availability_zone\t\t\t      = var.avail_zone\n\n  tags = {\n    Name = \"${var.env_prefix}-server\"\n  }\n\n  user_data = &#x3C;&#x3C;EOF\n                 #!/bin/bash\n                 apt-get update &#x26;&#x26; apt-get install -y docker-ce\n                 systemctl start docker\n                 usermod -aG docker ec2-user\n                 docker run -p 8080:8080 nginx\n              EOF\n}\n\nresource \"aws_instance\" \"myapp-server-two\" {\n  ami                         = data.aws_ami.amazon-linux-image.id\n  instance_type               = var.instance_type\n  key_name                    = \"myapp-key\"\n  associate_public_ip_address = true\n  subnet_id                   = aws_subnet.myapp-subnet-1.id\n  vpc_security_group_ids      = [aws_security_group.myapp-sg.id]\n  availability_zone\t\t\t      = var.avail_zone\n\n  tags = {\n    Name = \"${var.env_prefix}-server-two\"\n  }\n\n  # you can refer a bash file instead of writing it here\n\n  # doing the below changes will cause your EC2 instance to replaced(destroy and create)\n  # user_data = file(\"entry-script.sh\") # this file has to be located in your terraform dir\n  # Ideally, Terraform should only be used for initial infra setup/management, but for setting up applications and servers, you should probably use something like Ansible or Chef.\n  user_data = &#x3C;&#x3C;EOF\n                 #!/bin/bash\n                 apt-get update &#x26;&#x26; apt-get install -y docker-ce\n                 systemctl start docker\n                 usermod -aG docker ec2-user\n                 docker run -p 8080:8080 nginx\n              EOF\n}\n</code></pre>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/522ww47pqvt6y0yj8zparmy\">DevOps</a></li>\n<li><a href=\"/notes/mkwoo3ek4y6bnddpy1iteb9\">Terraform</a></li>\n</ul>","noteIndex":{"id":"3nfl4nvv516muyzozhcwrw8","title":"/root","desc":"","updated":1655559901157,"created":1637610830605,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"581715455a6f0f7a699209e8521b4acf","links":[{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"archive.about","alias":"my","position":{"start":{"line":4,"column":9,"offset":37},"end":{"line":4,"column":29,"offset":57},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"archive.about"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"tags.areas","alias":"#areas","position":{"start":{"line":20,"column":111,"offset":1051},"end":{"line":20,"column":117,"offset":1057},"indent":[]},"xvault":false,"to":{"fname":"tags.areas"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"tags.areas","alias":"#areas","position":{"start":{"line":21,"column":3,"offset":1198},"end":{"line":21,"column":9,"offset":1204},"indent":[]},"xvault":false,"to":{"fname":"tags.areas"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes","alias":"swipes","position":{"start":{"line":27,"column":3,"offset":1724},"end":{"line":27,"column":13,"offset":1734},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.quotes","alias":"quotes","position":{"start":{"line":27,"column":48,"offset":1769},"end":{"line":27,"column":72,"offset":1793},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.quotes"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.excerpts","alias":"excerpts","position":{"start":{"line":27,"column":74,"offset":1795},"end":{"line":27,"column":102,"offset":1823},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.excerpts"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.sayings","alias":"sayings","position":{"start":{"line":27,"column":104,"offset":1825},"end":{"line":27,"column":130,"offset":1851},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.sayings"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.phrases","alias":"phrases","position":{"start":{"line":27,"column":132,"offset":1853},"end":{"line":27,"column":158,"offset":1879},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.phrases"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"resources.people","alias":"others","position":{"start":{"line":27,"column":214,"offset":1935},"end":{"line":27,"column":241,"offset":1962},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"resources.people"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"inbox.webmark","alias":"webmark","position":{"start":{"line":31,"column":235,"offset":2463},"end":{"line":31,"column":260,"offset":2488},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"inbox.webmark"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"slipbox.Ontology","alias":"slipbox.Ontology","position":{"start":{"line":55,"column":3,"offset":3735},"end":{"line":55,"column":23,"offset":3755},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"slipbox.Ontology"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"archive.about","alias":"About me","position":{"start":{"line":60,"column":3,"offset":3963},"end":{"line":60,"column":29,"offset":3989},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"archive.about"}}],"anchors":{"welcome-to-noetic-noggin":{"type":"header","text":"Welcome to Noetic Noggin","value":"welcome-to-noetic-noggin","line":8,"column":0,"depth":1},"principles":{"type":"header","text":"Principles","value":"principles","line":18,"column":0,"depth":2},"all-notes-should-be-relative-to-me":{"type":"header","text":"All notes should be relative to me.","value":"all-notes-should-be-relative-to-me","line":20,"column":0,"depth":3},"gotta-capture-em-all":{"type":"header","text":"Gotta capture 'em all","value":"gotta-capture-em-all","line":30,"column":0,"depth":3},"dont-force-evolution":{"type":"header","text":"Don't force evolution","value":"dont-force-evolution","line":40,"column":0,"depth":3},"noise--signal":{"type":"header","text":"Noise & Signal","value":"noise--signal","line":45,"column":0,"depth":3},"why-do-any-of-this":{"type":"header","text":"Why do any of this?","value":"why-do-any-of-this","line":50,"column":0,"depth":3},"structure-of-this-wiki":{"type":"header","text":"Structure of this wiki","value":"structure-of-this-wiki","line":59,"column":0,"depth":2},"quicklinks":{"type":"header","text":"Quicklinks","value":"quicklinks","line":64,"column":0,"depth":2}},"children":["0yay2om15bsg2li2p6qgux7","05c4nnjqa92zx11ld6o0ytn","9gtn7g40cvqui0sifl1s7t5","ftbd1hknsd3ocd7jao26tn3","a1kmkdbpclaz5p6sykaw6kc","z121gkmqfo09m8r7jgnpfgn","gkqrr7xbt18xhi93dmjrwzj","ja2x4lrgejr9o9wvit0bd0d","luv39odkfibx3wdosvigwvy","vtvk3bi6o72w58oima9xzf3","yy652kvqrkfn9ipk07m40h4"],"parent":null,"data":{},"body":"\n# Welcome to Noetic Noggin\n\nThis is [[my|archive.about]] personal wiki and a commonplace book; notes by me, for me.\n\n🚧 Permanently under construction 🚧\n\n![](https://res.cloudinary.com/zubayr/image/upload/v1658499909/wiki/ajevkuyebljlxiblyst2.png)\n\nThis wiki was made possible with [dendron.so](https://dendron.so) and [obisidian.md](https://obsidian.md). Stored on [Github Repository](https://github.com/zubayrrr/dendron) and hosted on [Netlify](https://netlify.com) for free.\n\n## Principles\n\n### All notes should be relative to me.\n\n- All notes in principle are written for me; what I know about a subject, how I feel about a particular thing.\n- Opinions are fine as long as I feel strong epistemic confidence in the given opinion.\n- Don't over explain a note if it's not necessary, remember, these notes are for you and are relative to whatever knowledge you posses about the subject.\n- Read books and make an dedicated notes for them.\n- Listen podcasts but capture them inside a \"subject specific\" note or \"Map of Concept\" note or a note tagged #areas. Because making notes from podcasts can be tedious as they're not as well structured as books for consumption.(Whose merit is debatable.)\n- #areas are basically \"Map of Concept\" notes but I have recently come to the realization that its better to maintain them [Nikita Voloboev style](https://wiki.nikiv.dev/) but with heavy usage of transclusion and backlinking.\n  - \"Resources\" should be first processed and then mentioned inside the note, otherwise they should be left in inbox.\n\n### Gotta capture 'em all\n\n- Hog whatever information tickles your pickle([anything that gratifies one's intellectual curiosity](https://news.ycombinator.com/newsguidelines.html)).\n- [[swipes]] are interesting/useful bits of... [[quotes|swipes.quotes]], [[excerpts|swipes.excerpts]], [[sayings|swipes.sayings]], [[phrases|swipes.phrases]]. Essentially, ideas, opinions that are swiped off from [[others|resources.people]].\n- Make no distinction between \"your\" ideas and ideas of \"others\", because if you vibe with an idea; it's already yours.\n- But also remember \"If you've time to consume, you've time to produce.\".\n- Use [raindrop.io](https://raindrop.io) to manage your URL bookmarks.\n- If you need to bookmark a webpage or an article all together, use [MarkDownload](https://chrome.google.com/webstore/detail/markdownload-markdown-web/pcmpcfapbekmbjjkdalcgopdkipoggdi?hl=en-GB) to rip the entire page. Let's call it a [[webmark|inbox.webmark]]; it belong in the `/inbox`.\n- Similar process is employed for capturing tweets using [tweet-to-markdown](https://github.com/kbravh/tweet-to-markdown) and it also belongs in the `/inbox`.\n\n### Don't force evolution\n\n- Let your second brain evolve at it's own pace.\n- The structure should never be _too_ rigid because its meant to take form by itself.\n\n### Noise & Signal\n\n- While capturing ideas left and right is recommended, make sure you're not harming your periods of focus.\n- Have impenetrable focus periods (use Pomodoro method) where you only care about the work on hand and nothing else.\n\n### Why do any of this?\n\n- Because I can't remember everything - there's a lot of information around that interests me and there isn't enough working memory installed in me.\n- So, I make notes - to remember, to create, to meditate, to think.\n- A bodybuilder's portfolio is their body - my portfolio is my wiki.\n- Not only am I making - whatever I know - tangible by writing it down. I know exactly where to look if I ever forget something.\n- I am at the beginning of my learning adventures. When I look back at it, I will know where I came from and how my thoughts evolved over time.\n- Plus, its really fun to nerd out.\n\n## Structure of this wiki\n\n- [[slipbox.Ontology]] explains the structure of this wiki and the tags, backlinks used in it.\n- Dendron takes care of the structure and hierarchy(mostly), but I insist on using tags for backwards compatibility.\n\n## Quicklinks\n\n- [[About me|archive.about]]\n- [Github](https://github.com/zubayrrr)\n- [Twitter](https://twitter.com/zoobhalu)\n- [Blog](https://zubayrali.in)\n- [Guestbook](https://www.yourworldoftext.com/~zubayrali/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template","insertNote":{"initialValue":"templates"}},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableHandlebarTemplates":true,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"theme":"dark","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Noetic Noggin","description":"Personal Wiki / Digital Garden","author":"Zubayr Ali","twitter":"zoobhalu"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"siteUrl":"localhost:3000","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}