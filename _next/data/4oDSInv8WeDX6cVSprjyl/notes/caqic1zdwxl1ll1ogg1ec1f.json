{"pageProps":{"note":{"id":"caqic1zdwxl1ll1ogg1ec1f","title":"Scala","desc":"","updated":1652622344307,"created":20211111172236788,"tags":["now"],"custom":{},"fname":"devlog.scala","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"060f3b6f7921874f0fbd64c799b05c91","links":[{"type":"frontmatterTag","from":{"fname":"devlog.scala","id":"caqic1zdwxl1ll1ogg1ec1f","vaultName":"Dendron"},"value":"tags.now","alias":"now","xvault":false,"to":{"fname":"tags.now"}},{"type":"wiki","from":{"fname":"devlog.scala","id":"caqic1zdwxl1ll1ogg1ec1f","vaultName":"Dendron"},"value":"Java","alias":"Java","position":{"start":{"line":10,"column":86,"offset":304},"end":{"line":10,"column":94,"offset":312},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"Java"}},{"from":{"fname":"devlog.apache spark","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":78,"column":56,"offset":2578},"end":{"line":78,"column":72,"offset":2594},"indent":[]},"value":"devlog.scala","alias":"devlog.scala"},{"from":{"fname":"devlog.data engineering roadmap","vaultName":"Dendron"},"type":"backlink","position":{"start":{"line":10,"column":3,"offset":332},"end":{"line":10,"column":19,"offset":348},"indent":[]},"value":"devlog.scala","alias":"devlog.scala"}],"anchors":{"method-calls":{"type":"header","text":"Method calls","value":"method-calls","line":40,"column":0,"depth":3},"comparing-two-objects-and-function-overloading":{"type":"header","text":"Comparing two objects and function overloading","value":"comparing-two-objects-and-function-overloading","line":53,"column":0,"depth":3},"lists-and-lambda-expression":{"type":"header","text":"lists and lambda expression","value":"lists-and-lambda-expression","line":67,"column":0,"depth":3},"list-reverse-drop-and-take":{"type":"header","text":"List Reverse, Drop and Take","value":"list-reverse-drop-and-take","line":82,"column":0,"depth":3},"type-hierarchy":{"type":"header","text":"Type hierarchy","value":"type-hierarchy","line":94,"column":0,"depth":3},"list-of-complex-objects":{"type":"header","text":"List of complex objects","value":"list-of-complex-objects","line":106,"column":0,"depth":3},"expressions":{"type":"header","text":"Expressions","value":"expressions","line":132,"column":0,"depth":3},"instructions-vs-expressions":{"type":"header","text":"Instructions VS Expressions","value":"instructions-vs-expressions","line":136,"column":0,"depth":3},"functions":{"type":"header","text":"Functions","value":"functions","line":146,"column":0,"depth":3},"oop":{"type":"header","text":"OOP","value":"oop","line":150,"column":0,"depth":3}},"children":[],"parent":"9gtn7g40cvqui0sifl1s7t5","data":{}},"body":"<h1 id=\"scala\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#scala\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Scala</h1>\n<p>Creating a variable</p>\n<p><code>var num : Int = 8;</code></p>\n<ul>\n<li>where <code>Int</code> is a class, <code>num</code> is an object and <code>8</code> is also an object, <code>;</code> semi colons are optional.</li>\n</ul>\n<p>Don't create a variable that is sharing and changing at the same time.</p>\n<p>Scala believes in concurrency, to achieve concurrency, immutability, like <code>final</code> in <a title=\"Private\" style=\"color: brown\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\">Java (Private)</a>, we have <code>val</code> in Scala.</p>\n<p>You can change value of <code>var</code> but cannot change value of <code>val</code>.</p>\n<p>We use operator overloading in Scala since its (also) a functional programming language.</p>\n<p>When we do <code>8 + 7</code> we're really doing <code>8.+(7)</code></p>\n<p><code>var result = 8.+(7)</code> the <code>+</code> operator is not really an operator its a function/method</p>\n<p>To create a class</p>\n<pre><code>case class Student(var rollno: Int, var name : String, var marks : Int)\n// dont need a separate constructor\n// for assigning defaults, just proceed with giving values for the variables that were defined, you can also do constructor overloading\n\nvar s1 = Student(4) //> s1 : Demo.Student = Student(4, defaultValue, defaultValue)\n\n// when the passed value doesn't match the first variable Scala was expecting, it'll throw an error to explicitly define it\n\nvar s1 = Student(name = \"Somevalue\")\n</code></pre>\n<h3 id=\"method-calls\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#method-calls\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Method calls</h3>\n<pre><code>case class Student(var rollno: Int = 1, var name : String = \"This String\", var marks : Int = 100)\n{\n    def show() = println(\"Hello There!\") // use {} if your method is larger than 1 line\n}\n\nvar s1 = Student(name = \"New String\");\n\n// to call a method\n\ns1.show()\n</code></pre>\n<h3 id=\"comparing-two-objects-and-function-overloading\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#comparing-two-objects-and-function-overloading\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Comparing two objects and function overloading</h3>\n<pre><code>case class Student(var rollno: Int = 1, var name : String = \"This String\", var marks : Int = 100)\n{\n    def show() = println(\"Hello There!\") // use {} if your method is larger than 1 line\n\n    def >(s2 : Student) : Boolean = marks > s2.marks\n}\n\nvar s1 = Student();\nvar s2 = Student(2, \"Bro\", 98)\n\ns1.>(s2)\n</code></pre>\n<h3 id=\"lists-and-lambda-expression\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lists-and-lambda-expression\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>lists and lambda expression</h3>\n<pre><code>var nums = List(4, 7, 3, 9)\n\n// Looping over a list\n\nfor(n &#x3C;- nums)\n{\n    println(n)\n}\n\n// Lambda Expression\n\nnums.foreach {i:Int => println(i)}\n</code></pre>\n<h3 id=\"list-reverse-drop-and-take\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#list-reverse-drop-and-take\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>List Reverse, Drop and Take</h3>\n<p><code>num.reverse //> List[Int] = List(3, 2, 7, 4)</code> instead of mutating the existing <code>num</code> list, it creates a new list.</p>\n<p>to remove elements</p>\n<p><code>nums.drop(2)</code> removes first 2 elements</p>\n<p><code>nums.drop(2).take(2)</code> removes first 2 and prints next 2, even now it is creating a new list and not working on the existing list</p>\n<p>to remove syntatic sugar, <code>nums drop 2</code></p>\n<h3 id=\"type-hierarchy\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#type-hierarchy\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Type hierarchy</h3>\n<p>List of AnyVal</p>\n<p><code>var a_list = List(4, 7, true)</code></p>\n<p><img src=\"https://raw.githubusercontent.com/zubayrrr/twiki/main/bin/image.isoerzqte2n.png\"></p>\n<p>List of \"Any\"</p>\n<p><code>var b_list = List(4,6,true, \"String\")</code></p>\n<h3 id=\"list-of-complex-objects\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#list-of-complex-objects\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>List of complex objects</h3>\n<pre><code>case class Stud(rollno: Int, name: String, marks: Int)\n\nval students = List(Stud(1, \"Student1\", 40), Stud(2, \"Student2\", 80))\n\n// you can use tail head just like in java\n\nvar first = students.head\n\nval rest = students.tail.head // or students.tail.tail etc\n\nval toppers = students.filter(s => s.marks>=60)\n\nval parts = students.parition(s => s.marks&#x3C;=60) // returns tuples\n\n// tuples\n\nval part1 = parts._1\nval part2 = parts._2\n\nval (part1, part2) = students.parition(s => s.marks&#x3C;=60) // returns tuples\n\n</code></pre>\n<h3 id=\"expressions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#expressions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Expressions</h3>\n<p><code>val anIfExpression = if(2 > 3) \"bigger\" else \"smaller\"</code></p>\n<h3 id=\"instructions-vs-expressions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#instructions-vs-expressions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Instructions VS Expressions</h3>\n<p>Instructions are the building blocks of imperative programms, executed one by one, a program hence a sequence of instructions.</p>\n<p>Expressions are evaluated, reduced to a single value.</p>\n<p>Instructions like expressions in Scala are denoted by the type Unit</p>\n<p><code>val theUnit = println(\"Hello, Scala\")</code> <em>Unit, no meaningful value, = void</em></p>\n<h3 id=\"functions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#functions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Functions</h3>\n<pre><code>def myFunc(param: Int) = 42\n</code></pre>\n<h3 id=\"oop\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#oop\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>OOP</h3>\n<p>OOP in Scala is done using Single Class Inheritance</p>\n<pre><code>class Animal\nclass Dog extends Animal\n// interface\ntrait carivore {\n    // we can define abstracts here\n    def eat(animal: Animal): Unit\n}\n\nclass Crocodile extends Animal with Carnivore {\n    override def eat(animal: Animal): Unit = println(\"Crunch!\")\n}\n\n// singleton object/pattern\n\nobject MySingleton{\n    // we've defined both the Type MySingleton as well as the single Instance the Type can have\n    // additional implementation\n}\n\n// companions\nif you have a class/trait and singleton with the same name in the same file, they're called companions, companions have special features\n\nobject Carinvore{\n    // implementation\n}\n\n// generics\ntrait MyList[A]\ntrait MyList[A] // Covariance\n\n// method notation\n\nval x = 1 + 2\nval y = 1.+(2)\n</code></pre>\n<hr>\n<h2 id=\"tags\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tags\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Tags</h2>\n<ol>\n<li><a class=\"color-tag\" style=\"--tag-color: #ffffcb;\" href=\"/notes/9fkhgaxndflqosstx6duxkp\">now</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/f2kecna72pmc7re3wh1ugk4\">Apache Spark</a></li>\n<li><a href=\"/notes/2fz1tdl3yy2s78wdmo7ql56\">Data Engineering Roadmap</a></li>\n</ul>","noteIndex":{"id":"3nfl4nvv516muyzozhcwrw8","title":"/root","desc":"","updated":1655559901157,"created":1637610830605,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"581715455a6f0f7a699209e8521b4acf","links":[{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"archive.about","alias":"my","position":{"start":{"line":4,"column":9,"offset":37},"end":{"line":4,"column":29,"offset":57},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"archive.about"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"tags.areas","alias":"#areas","position":{"start":{"line":20,"column":111,"offset":1051},"end":{"line":20,"column":117,"offset":1057},"indent":[]},"xvault":false,"to":{"fname":"tags.areas"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"tags.areas","alias":"#areas","position":{"start":{"line":21,"column":3,"offset":1198},"end":{"line":21,"column":9,"offset":1204},"indent":[]},"xvault":false,"to":{"fname":"tags.areas"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes","alias":"swipes","position":{"start":{"line":27,"column":3,"offset":1724},"end":{"line":27,"column":13,"offset":1734},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.quotes","alias":"quotes","position":{"start":{"line":27,"column":48,"offset":1769},"end":{"line":27,"column":72,"offset":1793},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.quotes"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.excerpts","alias":"excerpts","position":{"start":{"line":27,"column":74,"offset":1795},"end":{"line":27,"column":102,"offset":1823},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.excerpts"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.sayings","alias":"sayings","position":{"start":{"line":27,"column":104,"offset":1825},"end":{"line":27,"column":130,"offset":1851},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.sayings"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"swipes.phrases","alias":"phrases","position":{"start":{"line":27,"column":132,"offset":1853},"end":{"line":27,"column":158,"offset":1879},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"swipes.phrases"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"resources.people","alias":"others","position":{"start":{"line":27,"column":214,"offset":1935},"end":{"line":27,"column":241,"offset":1962},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"resources.people"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"inbox.webmark","alias":"webmark","position":{"start":{"line":31,"column":235,"offset":2463},"end":{"line":31,"column":260,"offset":2488},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"inbox.webmark"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"slipbox.Ontology","alias":"slipbox.Ontology","position":{"start":{"line":55,"column":3,"offset":3735},"end":{"line":55,"column":23,"offset":3755},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"slipbox.Ontology"}},{"type":"wiki","from":{"fname":"root","id":"3nfl4nvv516muyzozhcwrw8","vaultName":"Dendron"},"value":"archive.about","alias":"About me","position":{"start":{"line":60,"column":3,"offset":3963},"end":{"line":60,"column":29,"offset":3989},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"archive.about"}}],"anchors":{"welcome-to-noetic-noggin":{"type":"header","text":"Welcome to Noetic Noggin","value":"welcome-to-noetic-noggin","line":8,"column":0,"depth":1},"principles":{"type":"header","text":"Principles","value":"principles","line":18,"column":0,"depth":2},"all-notes-should-be-relative-to-me":{"type":"header","text":"All notes should be relative to me.","value":"all-notes-should-be-relative-to-me","line":20,"column":0,"depth":3},"gotta-capture-em-all":{"type":"header","text":"Gotta capture 'em all","value":"gotta-capture-em-all","line":30,"column":0,"depth":3},"dont-force-evolution":{"type":"header","text":"Don't force evolution","value":"dont-force-evolution","line":40,"column":0,"depth":3},"noise--signal":{"type":"header","text":"Noise & Signal","value":"noise--signal","line":45,"column":0,"depth":3},"why-do-any-of-this":{"type":"header","text":"Why do any of this?","value":"why-do-any-of-this","line":50,"column":0,"depth":3},"structure-of-this-wiki":{"type":"header","text":"Structure of this wiki","value":"structure-of-this-wiki","line":59,"column":0,"depth":2},"quicklinks":{"type":"header","text":"Quicklinks","value":"quicklinks","line":64,"column":0,"depth":2}},"children":["0yay2om15bsg2li2p6qgux7","05c4nnjqa92zx11ld6o0ytn","9gtn7g40cvqui0sifl1s7t5","ftbd1hknsd3ocd7jao26tn3","a1kmkdbpclaz5p6sykaw6kc","z121gkmqfo09m8r7jgnpfgn","gkqrr7xbt18xhi93dmjrwzj","ja2x4lrgejr9o9wvit0bd0d","luv39odkfibx3wdosvigwvy","vtvk3bi6o72w58oima9xzf3","yy652kvqrkfn9ipk07m40h4"],"parent":null,"data":{},"body":"\n# Welcome to Noetic Noggin\n\nThis is [[my|archive.about]] personal wiki and a commonplace book; notes by me, for me.\n\n🚧 Permanently under construction 🚧\n\n![](https://res.cloudinary.com/zubayr/image/upload/v1658499909/wiki/ajevkuyebljlxiblyst2.png)\n\nThis wiki was made possible with [dendron.so](https://dendron.so) and [obisidian.md](https://obsidian.md). Stored on [Github Repository](https://github.com/zubayrrr/dendron) and hosted on [Netlify](https://netlify.com) for free.\n\n## Principles\n\n### All notes should be relative to me.\n\n- All notes in principle are written for me; what I know about a subject, how I feel about a particular thing.\n- Opinions are fine as long as I feel strong epistemic confidence in the given opinion.\n- Don't over explain a note if it's not necessary, remember, these notes are for you and are relative to whatever knowledge you posses about the subject.\n- Read books and make an dedicated notes for them.\n- Listen podcasts but capture them inside a \"subject specific\" note or \"Map of Concept\" note or a note tagged #areas. Because making notes from podcasts can be tedious as they're not as well structured as books for consumption.(Whose merit is debatable.)\n- #areas are basically \"Map of Concept\" notes but I have recently come to the realization that its better to maintain them [Nikita Voloboev style](https://wiki.nikiv.dev/) but with heavy usage of transclusion and backlinking.\n  - \"Resources\" should be first processed and then mentioned inside the note, otherwise they should be left in inbox.\n\n### Gotta capture 'em all\n\n- Hog whatever information tickles your pickle([anything that gratifies one's intellectual curiosity](https://news.ycombinator.com/newsguidelines.html)).\n- [[swipes]] are interesting/useful bits of... [[quotes|swipes.quotes]], [[excerpts|swipes.excerpts]], [[sayings|swipes.sayings]], [[phrases|swipes.phrases]]. Essentially, ideas, opinions that are swiped off from [[others|resources.people]].\n- Make no distinction between \"your\" ideas and ideas of \"others\", because if you vibe with an idea; it's already yours.\n- But also remember \"If you've time to consume, you've time to produce.\".\n- Use [raindrop.io](https://raindrop.io) to manage your URL bookmarks.\n- If you need to bookmark a webpage or an article all together, use [MarkDownload](https://chrome.google.com/webstore/detail/markdownload-markdown-web/pcmpcfapbekmbjjkdalcgopdkipoggdi?hl=en-GB) to rip the entire page. Let's call it a [[webmark|inbox.webmark]]; it belong in the `/inbox`.\n- Similar process is employed for capturing tweets using [tweet-to-markdown](https://github.com/kbravh/tweet-to-markdown) and it also belongs in the `/inbox`.\n\n### Don't force evolution\n\n- Let your second brain evolve at it's own pace.\n- The structure should never be _too_ rigid because its meant to take form by itself.\n\n### Noise & Signal\n\n- While capturing ideas left and right is recommended, make sure you're not harming your periods of focus.\n- Have impenetrable focus periods (use Pomodoro method) where you only care about the work on hand and nothing else.\n\n### Why do any of this?\n\n- Because I can't remember everything - there's a lot of information around that interests me and there isn't enough working memory installed in me.\n- So, I make notes - to remember, to create, to meditate, to think.\n- A bodybuilder's portfolio is their body - my portfolio is my wiki.\n- Not only am I making - whatever I know - tangible by writing it down. I know exactly where to look if I ever forget something.\n- I am at the beginning of my learning adventures. When I look back at it, I will know where I came from and how my thoughts evolved over time.\n- Plus, its really fun to nerd out.\n\n## Structure of this wiki\n\n- [[slipbox.Ontology]] explains the structure of this wiki and the tags, backlinks used in it.\n- Dendron takes care of the structure and hierarchy(mostly), but I insist on using tags for backwards compatibility.\n\n## Quicklinks\n\n- [[About me|archive.about]]\n- [Github](https://github.com/zubayrrr)\n- [Twitter](https://twitter.com/zoobhalu)\n- [Blog](https://zubayrali.in)\n- [Guestbook](https://www.yourworldoftext.com/~zubayrali/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template","insertNote":{"initialValue":"templates"}},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableHandlebarTemplates":true,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableSmartRefs":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"theme":"dark","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Noetic Noggin","description":"Personal Wiki / Digital Garden","author":"Zubayr Ali","twitter":"zoobhalu"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"siteUrl":"localhost:3000","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}